{"version":3,"sources":["components/NavBar/NavBar.js","components/Banner/Banner.js","components/Icon/Icon.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","Banner","status","currentScore","topScore","Icon","id","value","onClick","clickedPlayer","src","image","className","alt","shuffle","array","counter","length","index","Math","floor","random","temp","App","state","result","clicked","Icons","gameOver","console","log","concat","_this","includes","reset","pointIncrease","push","setState","score","resetIcon","points","window","location","reload","newScramble","this","_this2","Fragment","components_NavBar_NavBar","components_Banner_Banner","map","icon","components_Icon_Icon","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1a6dc97.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./NavBar.css\"\r\nconst NavBar = props => (\r\n  <header>\r\n    <nav>\r\n      <h1>Let's Play A Memory Game</h1>\r\n      <h2>Click on an image to earn points, but don't click on any more than once!</h2>\r\n    </nav>\r\n  </header>\r\n)\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport \"./Banner.css\"\r\n\r\nconst Banner = props => (\r\n  <article>\r\n    <p>{props.status} | Score: {props.currentScore} | Top Score: {props.topScore}</p>\r\n  </article>\r\n);\r\nexport default Banner;","import React from 'react';\r\nimport \"./Icon.css\"\r\n\r\nconst Icon = props => (\r\n  <section id={props.id} value={props.id} onClick={() =>\r\n  props.clickedPlayer(props.id)\r\n  }>\r\n    <article>\r\n      <img src={props.image} className=\"db\" alt=\"game-char\" />\r\n    </article>\r\n  </section>\r\n)\r\n\r\nexport default Icon;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar/NavBar';\nimport Banner from './components/Banner/Banner';\nimport Icon from './components/Icon/Icon';\nimport Icons from './Icons.json';\n\n\nconst shuffle = (array) => {\n  let counter = array.length;\n  while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n      counter--;\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n  }\n  return array;\n};\n\n\nclass App extends Component {\n\n  \n  state = {\n    currentScore: 0,\n    topScore: 0,\n    result: \"\",\n    clicked: [],\n    Icons,\n    gameOver: false\n  };\n\n  componentDidMount() {\n    this.setState({result: \"Click a character to get started\"})\n  }\n  clickedPlayer = (id) => {\n    console.log(`Picture clicked with id: ${id}`);\n    if(!this.state.clicked.includes(id)){\n      this.pointIncrease();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.reset();\n    }\n  }\n  pointIncrease = () => {\n    let score = this.state.currentScore + 1;\n    if (score === this.state.Icons.length) {\n      this.setState({\n        result: \"Winner!\",\n        topScore: score,\n        currentScore: 0,\n        clicked: [],\n        gameOver: false\n      });\n    } else if (score > this.state.topScore) {\n      this.setState({\n        topScore: score,\n        currentScore: score,\n        result: \"New high score!\",\n      });\n    } else {\n      this.setState({\n        currentScore: score,\n        result: \"You got this!\"\n      });\n    }\n    this.resetIcon();\n  }\n\n\n  reset = () => {\n    this.setState({\n      points: 0,\n      currentScore:0,\n      topScore: this.state.topScore,\n      result: \"GAME OVER\",\n      clicked: [],\n      gameOver: true\n    });\n    window.location.reload()\n  }\n\n\n  resetIcon = () => {\n    let newScramble = shuffle(Icons);\n    this.setState({Icons: newScramble})\n  }\n\n  render() {\n    return (\n      <>\n        <NavBar />\n        <Banner topScore={this.state.topScore} currentScore={this.state.currentScore} status={this.state.result}/>\n        <div className='main'>\n        {this.state.Icons.map(icon => (\n          <Icon\n            id={icon.id}\n            image={icon.image}\n            clickedPlayer={this.clickedPlayer}\n          />\n        ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}